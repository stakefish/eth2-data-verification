{"version":3,"sources":["verify-signature.js","ssz.js","../node_modules/@chainsafe/eth2-bls-wasm/dist sync /^/.//.*/.js$","App.js","index.js"],"names":["GENESIS_FORK_VERSION","Buffer","from","DOMAIN_DEPOSIT","EMPTY_ROOT","computeForkDataRoot","currentVersion","genesisValidatorsRoot","forkData","ForkData","hashTreeRoot","verifySignature","depositDatum","pubkeyBuffer","bufferHex","pubkey","signatureBuffer","signature","signingRoot","sszObjectRoot","domain","signingData","objectRoot","SigningData","computeSigningRoot","deposit_message_root","domainType","forkDataRoot","Uint8Array","set","subarray","computeDomain","verify","x","DepositMessage","ContainerType","fields","ByteVectorType","length","withdrawalCredentials","amount","NumberUintType","byteLength","buildMessageRoot","depositData","depositDataObject","withdrawal_credentials","Number","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","App","useState","status","setStatus","contract","setContract","credentials","setCredentials","validators","setValidators","buildDepositData","cred","sign","messageRoot","toString","onSubmit","event","a","preventDefault","undefined","initBLS","abiDecoder","addABI","BatchDeposit","decodedData","decodeMethod","params","validatorCount","value","pubkeys","slice","match","signatures","i","console","error","log","className","href","tabIndex","rel","src","width","alt","name","placeholder","onChange","target","type","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2d06cc9.chunk.js","sourcesContent":["import { verify } from \"@chainsafe/bls\";\nimport { bufferHex, ForkData, SigningData } from \"./ssz\";\n\nconst forkVersion = Buffer.from(\"00000000\", \"hex\");\n\nexport const GENESIS_FORK_VERSION = forkVersion;\n\nexport const DOMAIN_DEPOSIT = Buffer.from(\"03000000\", \"hex\");\nexport const EMPTY_ROOT = Buffer.from(\n  \"0000000000000000000000000000000000000000000000000000000000000000\",\n  \"hex\"\n);\n\nconst computeForkDataRoot = (currentVersion, genesisValidatorsRoot) => {\n  const forkData = {\n    currentVersion,\n    genesisValidatorsRoot,\n  };\n  return ForkData.hashTreeRoot(forkData);\n};\nconst computeDomain = (\n  domainType,\n  forkVersion = GENESIS_FORK_VERSION,\n  genesisValidatorsRoot = EMPTY_ROOT\n) => {\n  const forkDataRoot = computeForkDataRoot(forkVersion, genesisValidatorsRoot);\n  const domain = new Uint8Array(32);\n  domain.set(domainType);\n  domain.set(forkDataRoot.subarray(0, 28), 4);\n  return domain;\n};\nconst computeSigningRoot = (sszObjectRoot, domain) => {\n  const signingData = {\n    objectRoot: sszObjectRoot,\n    domain,\n  };\n  return SigningData.hashTreeRoot(signingData);\n};\n// Note: usage of this method requires awaiting the initBLS() method from \"@chainsafe/bls\";\nexport const verifySignature = (depositDatum) => {\n  const pubkeyBuffer = bufferHex(depositDatum.pubkey);\n  const signatureBuffer = bufferHex(depositDatum.signature);\n  const depositMessageBuffer = bufferHex(depositDatum.deposit_message_root);\n  const domain = computeDomain(DOMAIN_DEPOSIT);\n  const signingRoot = computeSigningRoot(depositMessageBuffer, domain);\n  return verify(pubkeyBuffer, signingRoot, signatureBuffer);\n};\n","import { NumberUintType, ByteVectorType, ContainerType } from \"@chainsafe/ssz\";\n\nexport const bufferHex = (x) => Buffer.from(x, \"hex\");\nconst DepositMessage = new ContainerType({\n  fields: {\n    pubkey: new ByteVectorType({\n      length: 48,\n    }),\n    withdrawalCredentials: new ByteVectorType({\n      length: 32,\n    }),\n    amount: new NumberUintType({\n      byteLength: 8,\n    }),\n  },\n});\n\nexport const buildMessageRoot = (depositData) => {\n  const depositDataObject = {\n    pubkey: bufferHex(depositData.pubkey),\n    withdrawalCredentials: bufferHex(depositData.withdrawal_credentials),\n    amount: Number(depositData.amount),\n  };\n\n  return DepositMessage.hashTreeRoot(depositDataObject);\n};\n\nexport const SigningData = new ContainerType({\n  fields: {\n    objectRoot: new ByteVectorType({\n      length: 32,\n    }),\n    domain: new ByteVectorType({\n      length: 32,\n    }),\n  },\n});\nexport const ForkData = new ContainerType({\n  fields: {\n    currentVersion: new ByteVectorType({\n      length: 4,\n    }),\n    genesisValidatorsRoot: new ByteVectorType({\n      length: 32,\n    }),\n  },\n});\n","var map = {\n\t\"./bls.js\": 107,\n\t\"./bls_c.js\": 302\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 301;","import { useState } from \"react\";\n\nimport { initBLS } from \"@chainsafe/bls\";\nimport abiDecoder from \"abi-decoder\";\nimport { buildMessageRoot } from \"./ssz\";\nimport { verifySignature } from \"./verify-signature\";\nimport BatchDeposit from \"./BatchDeposit.json\";\n\nfunction App() {\n  const [status, setStatus] = useState();\n  const [contract, setContract] = useState();\n  const [credentials, setCredentials] = useState();\n  const [validators, setValidators] = useState();\n\n  const buildDepositData = (pubkey, cred, amount, sign) => {\n    const depositDatum = {\n      pubkey,\n      withdrawal_credentials: cred,\n      amount,\n      signature: sign,\n    };\n    const messageRoot = buildMessageRoot(depositDatum).toString(\"hex\");\n\n    return { ...depositDatum, deposit_message_root: messageRoot };\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    setStatus(undefined);\n\n    try {\n      await initBLS();\n\n      abiDecoder.addABI(BatchDeposit);\n\n      const decodedData = abiDecoder.decodeMethod(contract);\n\n      if (!decodedData?.params?.length) {\n        setStatus(\"error\");\n        return;\n      }\n\n      // Get number of validators\n      const validatorCount = decodedData.params[3].value.length;\n\n      const pubkeys = decodedData.params[0].value.slice(2).match(/.{1,96}/g);\n      const signatures = decodedData.params[2].value.slice(2).match(/.{1,192}/g);\n\n      // loop each deposit\n      for (let i = 0; i < validatorCount; i++) {\n        var depositData = buildDepositData(\n          pubkeys[i],\n          decodedData.params[1].value.slice(2),\n          Number(\"32000000000\"),\n          signatures[i]\n        );\n\n        // Verify signatures to prevent fork version mismatch / mitm\n        if (!verifySignature(depositData)) {\n          console.error(\"Can't verify backend signature!\", depositData);\n          setStatus(\"error\");\n          return;\n        } else {\n          console.log(decodedData.params);\n          setCredentials(decodedData?.params[1].value);\n          setValidators(decodedData?.params[3].value.length);\n          console.log(\"Sign ok\");\n          setStatus(\"success\");\n        }\n      }\n    } catch (error) {\n      console.error(error);\n      setStatus(\"error\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"container\">\n          <a href=\"https://stake.fish/\" tabIndex=\"-1\" rel=\"noopener\">\n            <img className=\"logo\" src=\"logo.svg\" width=\"220px\" alt=\"stake.fish\" />\n          </a>\n        </div>\n      </header>\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title\">Check your ETH 2.0 Deposit Message</h1>\n          <div className=\"row\">\n            <div className=\"col-left\">\n              <div className=\"group\">\n                <p className=\"lead\">\n                  This tool check if transaction raw data contains a valid ETH 2.0 Deposit Message. Copy and\n                  paste your ETH1.x Deposit transaction raw data here\n                </p>\n                <form className=\"form\" onSubmit={onSubmit}>\n                  <div className=\"form-group\">\n                    <textarea\n                      name=\"contract\"\n                      className=\"textarea-field\"\n                      placeholder=\"Paste your code here\"\n                      onChange={(event) => setContract(event.target.value)}\n                    ></textarea>\n                  </div>\n                  <button type=\"submit\" className=\"btn-primary\" disabled={!contract}>\n                    Check\n                  </button>\n                </form>\n                {status === \"success\" ? (\n                  <div className=\"message message--success\">\n                    <div className=\"message-inner\">\n                      <div className=\"message-icon\">\n                        <img src=\"success-icn.svg\" width=\"64px\" alt=\"success\" />\n                      </div>\n                      <div className=\"message-content\">\n                        <div className=\"message-title\">Success!</div>\n                        <div className=\"message-text\">Withdrawal credentials: {credentials}</div>\n                        <div className=\"message-text\">Validator number: {validators}</div>\n                      </div>\n                    </div>\n                  </div>\n                ) : null}\n                {status === \"error\" ? (\n                  <div className=\"message message--error\">\n                    <div className=\"message-inner\">\n                      <div className=\"message-icon\">\n                        <img src=\"error-icn.svg\" width=\"64px\" alt=\"error\" />\n                      </div>\n                      <div className=\"message-content\">\n                        <div className=\"message-title\">Error</div>\n                        <div className=\"message-text\">\n                          Whoops! It looks like your transaction is not vaild for ETH 2 Mainnet. Do not\n                          broadcast the transaction and contact your staking provider.\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : null}\n              </div>\n            </div>\n            <div className=\"col-right\">\n              <img className=\"section-image\" src=\"developer@2x.png\" alt=\"developer\" width=\"440px\" />\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import \"./sass/main.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}